{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';// Helper function to check if user is authenticated\nconst isAuthenticated=async()=>{try{const response=await fetch('/api/checkAuth');const contentType=response.headers.get('content-type');// Check if the response is JSON\nif(contentType&&contentType.includes('application/json')){const data=await response.json();return data.isAuthenticated;}else{// Log the unexpected response for debugging\nconsole.error('Unexpected response:',await response.text());return false;}}catch(error){console.error('Error in isAuthenticated:',error);return false;}};function ProtectedRoute(_ref){let{children}=_ref;const[auth,setAuth]=useState(false);const navigate=useNavigate();useEffect(()=>{const checkAuth=async()=>{const loggedIn=await isAuthenticated();if(!loggedIn){navigate('/login');// Redirect to login if not authenticated\n}else{setAuth(true);// Set authenticated state to true\n}};checkAuth();},[navigate]);return auth?children:null;// Render children (protected page) only if authenticated\n}export default ProtectedRoute;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","isAuthenticated","response","fetch","contentType","headers","get","includes","data","json","console","error","text","ProtectedRoute","_ref","children","auth","setAuth","navigate","checkAuth","loggedIn"],"sources":["/Users/ddc/Documents/GitHub/code-golf/Website Stuff/Current Version/V3/my-app/frontend/src/ProtectedRoute.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Helper function to check if user is authenticated\nconst isAuthenticated = async () => {\n  try {\n      const response = await fetch('/api/checkAuth');\n      const contentType = response.headers.get('content-type');\n      \n      // Check if the response is JSON\n      if (contentType && contentType.includes('application/json')) {\n          const data = await response.json();\n          return data.isAuthenticated;\n      } else {\n          // Log the unexpected response for debugging\n          console.error('Unexpected response:', await response.text());\n          return false;\n      }\n  } catch (error) {\n      console.error('Error in isAuthenticated:', error);\n      return false;\n  }\n};\n\n\nfunction ProtectedRoute({ children }) {\n  const [auth, setAuth] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const loggedIn = await isAuthenticated();\n      if (!loggedIn) {\n        navigate('/login'); // Redirect to login if not authenticated\n      } else {\n        setAuth(true); // Set authenticated state to true\n      }\n    };\n    checkAuth();\n  }, [navigate]);\n\n  return auth ? children : null; // Render children (protected page) only if authenticated\n}\n\nexport default ProtectedRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAE9C;AACA,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gBAAgB,CAAC,CAC9C,KAAM,CAAAC,WAAW,CAAGF,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAExD;AACA,GAAIF,WAAW,EAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,CAAE,CACzD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CAACP,eAAe,CAC/B,CAAC,IAAM,CACH;AACAS,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAE,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAC5D,MAAO,MAAK,CAChB,CACJ,CAAE,MAAOD,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,MAAO,MAAK,CAChB,CACF,CAAC,CAGD,QAAS,CAAAE,cAAcA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACvC,KAAM,CAAAmB,QAAQ,CAAGlB,WAAW,CAAC,CAAC,CAE9BF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAnB,eAAe,CAAC,CAAC,CACxC,GAAI,CAACmB,QAAQ,CAAE,CACbF,QAAQ,CAAC,QAAQ,CAAC,CAAE;AACtB,CAAC,IAAM,CACLD,OAAO,CAAC,IAAI,CAAC,CAAE;AACjB,CACF,CAAC,CACDE,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,CAACD,QAAQ,CAAC,CAAC,CAEd,MAAO,CAAAF,IAAI,CAAGD,QAAQ,CAAG,IAAI,CAAE;AACjC,CAEA,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}